{"version":3,"sources":["components/Search.js","components/AutoCompleteFilter.js","components/Dictionary.js","Force.js","Home.js","App.js","reportWebVitals.js","index.js"],"names":["styles","container","borderRadius","background","width","padding","height","position","zIndex","top","left","Seacrh","props","style","Autocomplete","id","options","nodes","getOptionLabel","option","renderOption","NOME","onInputChange","event","newInputValue","nodeVector","filter","node","handleNodeClick","renderInput","params","TextField","label","variant","AutoCompleteFilters","data","applyFilter","placeholder","marginBottom","multiple","size","limitTags","onChange","selectedValues","DialogTitle","withStyles","theme","root","margin","spacing","closeButton","right","color","palette","grey","children","classes","onClose","other","disableTypography","className","Typography","IconButton","aria-label","onClick","DialogContent","MuiDialogContent","DenseTable","TableContainer","component","Paper","Table","TableHead","TableRow","Object","keys","DICIONARIO","map","key","TableCell","align","toUpperCase","TableBody","item","col","dtype","descr","null","LGPD","assunto","index","Dictionary","close","open","Dialog","maxWidth","aria-labelledby","dividers","Force","graphType","graphRef","useRef","useState","isLoading","setIsLoading","setNodes","links","setLinks","secureLinks","setSecureLinks","secureNodes","setSecureNodes","filteredTemp","setFilteredTemp","clickedNode","setClickedNode","openNodeInfo","setOpenNodeInfo","openFilteredResults","setOpenFilteredResults","openDictDialog","setOpenDictDialog","dataShouldBeUpdated","setDataShouldBeUpdated","assuntoFilter","setAssuntoFilter","dictAssuntoFilter","setDictAssuntoFilter","plataformaFilter","setPlataformaFilter","conjuntoFilter","setConjuntoFilter","useEffect","fetch","then","json","filteredNodes","filteredLinks","length","ASSUNTO","some","n","includes","link","source","target","Set","concat","apply","column","PLATAFORMA","CONJUNTO","distRatio","Math","hypot","x","y","z","current","cameraPosition","ref","graphData","nodeLabel","linkLabel","protocolo","nodeAutoColorBy","onNodeClick","linkDirectionalParticles","linkDirectionalParticleWidth","cursor","marginTop","renderFilteredResults","CAMINHO","DESCR","maxHeight","value","Home","twoDOpen","setTwoDOpen","threeDOpen","setThreeDOpen","handleClose","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","console","log"],"mappings":"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","file":"static/js/main.b42a2dac.chunk.js","sourcesContent":["import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nconst styles = {\r\n    container: {borderRadius: '10px', background: '#F2F2F2', width: 'fit-content', padding: '15px', height: 'fit-content', position: 'absolute', zIndex: '1', top: '60px', left: '10px'},\r\n}\r\n\r\nexport default function Seacrh(props) {\r\n    return <div style={styles.container}>\r\n        <Autocomplete\r\n            id=\"combo-box-demo\"\r\n            options={props.nodes}\r\n            getOptionLabel={(option) => option.id}\r\n            renderOption={(option) => option.NOME}\r\n            onInputChange={(event, newInputValue) => {\r\n                if(newInputValue){\r\n                    const nodeVector = props.nodes.filter((node) => node.id === newInputValue)\r\n    \r\n                    props.handleNodeClick(nodeVector[0]);\r\n                }\r\n            }}\r\n            style={{ width: 300 }}\r\n            renderInput={(params) => <TextField {...params} label=\"ID da base\" variant=\"outlined\" />}\r\n        />\r\n    </div>\r\n}   ","import React from 'react';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nexport default function AutoCompleteFilters({data, applyFilter, label, placeholder}) {\r\n    return <div style={{marginBottom: '20px'}}>\r\n        <Autocomplete\r\n            multiple\r\n            size='small'\r\n            limitTags={2}\r\n            id=\"multiple-limit-tags\"\r\n            options={data}\r\n            style={{ width: 300 }}\r\n            getOptionLabel={(option) => option}\r\n            onChange={(event, selectedValues) => {\r\n                applyFilter(selectedValues)\r\n            }}\r\n            renderInput={(params) => (\r\n                <TextField {...params} variant=\"outlined\" label={label} placeholder={placeholder} />\r\n            )}\r\n        />\r\n    </div>\r\n}","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n    const { children, classes, onClose, ...other } = props;\r\n    return (\r\n        <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n        <Typography variant=\"h6\">{children}</Typography>\r\n        {onClose ? (\r\n            <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n            <CloseIcon />\r\n            </IconButton>\r\n        ) : null}\r\n        </MuiDialogTitle>\r\n    );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}))(MuiDialogContent);\r\n\r\nfunction DenseTable(node) {\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table size=\"small\" aria-label=\"a dense table\">\r\n            <TableHead>\r\n                <TableRow>\r\n                    {Object.keys(node.DICIONARIO[0]).map(key => {\r\n                        return <TableCell align=\"center\"><b>{key.toUpperCase()}</b></TableCell>\r\n                    })}\r\n                </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n                {node.DICIONARIO.map(item => {\r\n                    return <TableRow>\r\n                        <TableCell align=\"center\"><b>{item.col}</b></TableCell>\r\n                        <TableCell align=\"center\">{item.dtype}</TableCell>\r\n                        <TableCell align=\"center\">{item.descr}</TableCell>\r\n                        <TableCell align=\"center\">{item.null}</TableCell>\r\n                        <TableCell align=\"center\">{item.LGPD}</TableCell>\r\n                        <TableCell align=\"center\">{item.assunto.map((assunto, index) => item.assunto[index + 1] ? `${assunto}, ` : `${assunto}`)}</TableCell>\r\n                    </TableRow>\r\n                })}\r\n            </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n        );\r\n    }\r\n\r\n\r\nexport default function Dictionary({close, open, node}) {\r\n\r\n    return (\r\n        <div>\r\n            <Dialog maxWidth={'500'} onClose={close} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n                <DialogTitle id=\"customized-dialog-title\" onClose={close}>\r\n                    Dicionário de Dados\r\n                </DialogTitle>\r\n                <DialogContent dividers>\r\n                    {DenseTable(node)}\r\n                </DialogContent>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","import \"./styles/global.css\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { ForceGraph3D, ForceGraph2D } from \"react-force-graph\";\r\nimport Search from \"./components/Search\";\r\nimport AutoCompleteFilter from \"./components/AutoCompleteFilter\";\r\nimport Dictionary from './components/Dictionary';\r\n\r\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nfunction Force({graphType, close}) {\r\n    const graphRef = useRef(null);\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [nodes, setNodes] = useState([]);\r\n    const [links, setLinks] = useState([]);\r\n\r\n    const [secureLinks, setSecureLinks] = useState([])\r\n    const [secureNodes, setSecureNodes] = useState([])\r\n\r\n    const [filteredTemp, setFilteredTemp] = useState([])\r\n    const [clickedNode, setClickedNode] = useState({})\r\n\r\n    const [openNodeInfo, setOpenNodeInfo] = useState(false)\r\n    const [openFilteredResults, setOpenFilteredResults] = useState(false);\r\n    const [openDictDialog, setOpenDictDialog] = useState(false);\r\n\r\n    const [dataShouldBeUpdated, setDataShouldBeUpdated] = useState(false);\r\n    const [assuntoFilter, setAssuntoFilter] = useState([]);\r\n    const [dictAssuntoFilter, setDictAssuntoFilter] = useState([]);\r\n    const [plataformaFilter, setPlataformaFilter] = useState([]);\r\n    const [conjuntoFilter, setConjuntoFilter] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetch(\r\n        \"conns.json\"\r\n        )\r\n        .then((data) => data.json())\r\n        .then((json) => {\r\n            setLinks(json)\r\n            setSecureLinks(json)\r\n        }, []);\r\n\r\n        fetch(\r\n        \"nodes.json\"\r\n        )\r\n        .then((data) => data.json())\r\n        .then((json) => {\r\n            setNodes(json)\r\n            setSecureNodes(json)\r\n            setIsLoading(false)\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        let filteredNodes\r\n        let filteredLinks\r\n\r\n        if(assuntoFilter.length > 0) {\r\n            filteredNodes = secureNodes.filter(node => node.ASSUNTO.some(n => assuntoFilter.includes(n)));\r\n            filteredLinks = secureLinks.filter(link => [...filteredNodes.map(node => node.id)].includes(link.source.id) && [...filteredNodes.map(node => node.id)].includes(link.target.id))\r\n        } else {\r\n            filteredLinks = secureLinks;\r\n            filteredNodes = secureNodes;\r\n        }\r\n\r\n        if(dictAssuntoFilter.length > 0) {\r\n            filteredNodes = filteredNodes.filter(node => [...new Set([].concat.apply([], [...node.DICIONARIO.map(column => column.assunto)]))].some(n => dictAssuntoFilter.includes(n)) )\r\n            filteredLinks = filteredLinks.filter(link => [...filteredNodes.map(node => node.id)].includes(link.source.id) && [...filteredNodes.map(node => node.id)].includes(link.target.id))\r\n        }\r\n\r\n        if(plataformaFilter.length > 0) {\r\n            filteredNodes = filteredNodes.filter(node => plataformaFilter.includes(node.PLATAFORMA))\r\n            filteredLinks = filteredLinks.filter(link => [...filteredNodes.map(node => node.id)].includes(link.source.id) && [...filteredNodes.map(node => node.id)].includes(link.target.id))\r\n        }\r\n\r\n        if(conjuntoFilter.length > 0) {\r\n            filteredNodes = filteredNodes.filter(node => conjuntoFilter.includes(node.CONJUNTO))\r\n            filteredLinks = filteredLinks.filter(link => [...filteredNodes.map(node => node.id)].includes(link.source.id) && [...filteredNodes.map(node => node.id)].includes(link.target.id))\r\n        }\r\n\r\n        if(assuntoFilter.length > 0 || dictAssuntoFilter.length > 0 || plataformaFilter.length > 0 || conjuntoFilter.length > 0) {\r\n            setOpenFilteredResults(true);\r\n        }\r\n\r\n        setFilteredTemp({nodes: filteredNodes, links: filteredLinks})\r\n        setDataShouldBeUpdated(false);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [dataShouldBeUpdated, assuntoFilter, conjuntoFilter, plataformaFilter, dictAssuntoFilter])\r\n\r\n\r\n    const renderFilteredResults = ({nodes, links}) => {\r\n\r\n        return (<>\r\n            <div className='filteredResultsContainer'>\r\n                <div className='filteredResultsNav'>\r\n                    <CloseIcon style={{cursor: 'pointer'}} onClick={() => setOpenFilteredResults(false)}/>\r\n                    <CheckIcon style={{cursor: 'pointer'}} onClick={() => {\r\n                        setNodes(nodes);\r\n                        setLinks(links);\r\n                    }}/>\r\n                    <RotateLeftIcon style={{cursor: 'pointer'}}  onClick={() => {\r\n                        setNodes(secureNodes);\r\n                        setLinks(secureLinks);\r\n                    }}/>\r\n                </div>\r\n                <div style={{marginTop: '45px'}}>\r\n                    {nodes.map(node => <div className='filteredResultsNodeId' onClick={() => handleNodeClick(node)} style={{cursor: 'pointer', marginBottom: '6px'}}>{node.NOME}</div>)}\r\n                </div>\r\n            </div>\r\n        </>\r\n        );\r\n    }\r\n\r\n    const renderNodeInfo = (node) => {\r\n        return <div className='nodeInfoContainer'>\r\n            <CloseIcon style={{cursor: 'pointer'}} onClick={() => setOpenNodeInfo(false)}/>\r\n            <div className='nodeInfoTitle'><b>Informações da Base: </b>{node.NOME}</div>\r\n            <div className='nodeInfoProp'><b>ID: </b>{node.id}</div>\r\n            <div className='nodeInfoProp'><b>Plataforma: </b>{node.PLATAFORMA}</div>\r\n            <div className='nodeInfoProp'><b>Caminho: </b>{node.CAMINHO}</div>\r\n            <div className='nodeInfoProp'><b>Conjunto: </b>{node.CONJUNTO}</div>\r\n            <div className='nodeInfoProp'><b>Assunto: </b>{node.ASSUNTO.map(item => <div>{item}</div>)}</div>\r\n            <div className='nodeInfoProp'><b>Dscrição: </b>{node.DESCR}</div>\r\n            <div className='nodeInfoProp'><b>Dicionário: </b><div onClick={() => setOpenDictDialog(true)} className='nodeInfoDicioLink'>Visualizar Dicionário</div></div>\r\n        </div>\r\n    }\r\n    \r\n    const handleNodeClick = (node) => {\r\n        if(graphType === '3D') {\r\n            const distance = 40;\r\n            const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\r\n    \r\n            graphRef.current.cameraPosition(\r\n                {\r\n                x: node.x * distRatio,\r\n                y: node.y * distRatio,\r\n                z: node.z * distRatio,\r\n                }, // new position\r\n                node, // lookAt ({ x, y, z })\r\n                3000\r\n            );\r\n        }\r\n\r\n        node.color = '#17fc03'\r\n\r\n        setClickedNode(node);\r\n        setOpenNodeInfo(true);\r\n    }\r\n\r\n    const styles = {\r\n        container: {borderRadius: '10px', background: '#F2F2F2', width: 'fit-content', padding: '15px 15px 0 15px', height: 'fit-content', maxHeight: '80vh', position: 'absolute', zIndex: '1', top: '158px', left: '10px'},\r\n    }\r\n\r\n    return (\r\n        <div className=\"Graph\">\r\n            {graphType === '3D' ? \r\n                <>{!isLoading && <ForceGraph3D\r\n                    ref={graphRef}\r\n                    graphData={{ nodes: nodes, links: links }}\r\n                    nodeLabel={\"id\"}\r\n                    linkLabel={(link) => `${link.protocolo}`}\r\n                    nodeAutoColorBy={\"PLATAFORMA\"}\r\n                    onNodeClick={ handleNodeClick }\r\n                    linkDirectionalParticles={1}\r\n                    linkDirectionalParticleWidth={2}\r\n                />}</> :\r\n                <>{!isLoading && <ForceGraph2D\r\n                    ref={graphRef}\r\n                    graphData={{ nodes: nodes, links: links }}\r\n                    nodeLabel={\"id\"}\r\n                    linkLabel={(link) => `${link.protocolo}`}\r\n                    nodeAutoColorBy={\"PLATAFORMA\"}\r\n                    onNodeClick={ handleNodeClick }\r\n                />}</>\r\n            }\r\n            {openFilteredResults && renderFilteredResults(filteredTemp)}\r\n            {openNodeInfo && renderNodeInfo(clickedNode)}\r\n            {openDictDialog && <Dictionary open={openDictDialog} close={() => setOpenDictDialog(false)} node={clickedNode}/>}\r\n            <div style={styles.container}>\r\n                <AutoCompleteFilter \r\n                    data={[...new Set([...[].concat.apply([], [...nodes.map(node => node.ASSUNTO)])])]} \r\n                    applyFilter={(value) => {\r\n                        setAssuntoFilter(value);\r\n                        setDataShouldBeUpdated(true);\r\n                    }}\r\n                    label={'Assuntos'}\r\n                    placeholder={'assuntos'}\r\n                />\r\n                <AutoCompleteFilter \r\n                    data={['dado pessoal', 'transferencia', 'seguranca', 'dados', 'cliente']} \r\n                    applyFilter={(value) => {\r\n                        setDictAssuntoFilter(value);\r\n                        setDataShouldBeUpdated(true);\r\n                    }}\r\n                    label={'Assuntos das Colunas'}\r\n                    placeholder={'assuntos'}\r\n                />\r\n                <AutoCompleteFilter \r\n                    data={[...new Set(nodes.map(node => node.PLATAFORMA))]} \r\n                    applyFilter={(value) => {\r\n                        setPlataformaFilter(value);\r\n                        setDataShouldBeUpdated(true);\r\n                    }}\r\n                    label={'Plataforma'}\r\n                    placeholder={'plataforma'}\r\n                />\r\n                <AutoCompleteFilter \r\n                    data={[...new Set(nodes.map(node => node.CONJUNTO))]} \r\n                    applyFilter={(value) => {\r\n                        setConjuntoFilter(value);\r\n                        setDataShouldBeUpdated(true);\r\n                    }}\r\n                    label={'Conjunto'}\r\n                    placeholder={'conjunto'}\r\n                />\r\n            </div>\r\n            <div className=\"backButton\" onClick={close}>Voltar</div>\r\n            {!isLoading && <Search nodes={nodes} graphRef={graphRef} handleNodeClick={handleNodeClick}/>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Force;\r\n","import React, { useState } from 'react';\r\nimport Force from './Force';\r\n\r\nexport default function Home() {\r\n    const [twoDOpen, setTwoDOpen] = useState(false);\r\n    const [threeDOpen, setThreeDOpen] = useState(false);\r\n\r\n    const handleClose = () => {\r\n        setThreeDOpen(false);\r\n        setTwoDOpen(false);\r\n    }\r\n\r\n    return <>\r\n        {twoDOpen && <Force graphType=\"2D\" close={handleClose}/>}\r\n        {threeDOpen && <Force graphType=\"3D\" close={handleClose}/>}\r\n        {!twoDOpen && !threeDOpen && <><div className=\"home-title\">Escolha o modelo</div>\r\n        <button className=\"home-2dbtn\" onClick={() => setTwoDOpen(true)}>2D</button>\r\n        <button className=\"home-3dbtn\" onClick={() => setThreeDOpen(true)}>3D</button></>}\r\n    </>\r\n}","import './App.css';\nimport Home from './Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}